// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace Rose.Network.Packets
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

public struct PacketData : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static PacketData GetRootAsPacketData(ByteBuffer _bb) { return GetRootAsPacketData(_bb, new PacketData()); }
  public static PacketData GetRootAsPacketData(ByteBuffer _bb, PacketData obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public PacketData __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public Rose.Network.Packets.PacketType DataType { get { int o = __p.__offset(4); return o != 0 ? (Rose.Network.Packets.PacketType)__p.bb.Get(o + __p.bb_pos) : Rose.Network.Packets.PacketType.NONE; } }
  public TTable? Data<TTable>() where TTable : struct, IFlatbufferObject { int o = __p.__offset(6); return o != 0 ? (TTable?)__p.__union<TTable>(o + __p.bb_pos) : null; }

  public static Offset<Rose.Network.Packets.PacketData> CreatePacketData(FlatBufferBuilder builder,
      Rose.Network.Packets.PacketType data_type = Rose.Network.Packets.PacketType.NONE,
      int dataOffset = 0) {
    builder.StartTable(2);
    PacketData.AddData(builder, dataOffset);
    PacketData.AddDataType(builder, data_type);
    return PacketData.EndPacketData(builder);
  }

  public static void StartPacketData(FlatBufferBuilder builder) { builder.StartTable(2); }
  public static void AddDataType(FlatBufferBuilder builder, Rose.Network.Packets.PacketType dataType) { builder.AddByte(0, (byte)dataType, 0); }
  public static void AddData(FlatBufferBuilder builder, int dataOffset) { builder.AddOffset(1, dataOffset, 0); }
  public static Offset<Rose.Network.Packets.PacketData> EndPacketData(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Rose.Network.Packets.PacketData>(o);
  }
  public static void FinishPacketDataBuffer(FlatBufferBuilder builder, Offset<Rose.Network.Packets.PacketData> offset) { builder.Finish(offset.Value); }
  public static void FinishSizePrefixedPacketDataBuffer(FlatBufferBuilder builder, Offset<Rose.Network.Packets.PacketData> offset) { builder.FinishSizePrefixed(offset.Value); }
};


}
